<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceJSL" kind="namespace" language="C++">
    <compoundname>JSL</compoundname>
    <innerclass refid="classJSL_1_1Argument" prot="public">JSL::Argument</innerclass>
    <innerclass refid="classJSL_1_1ArgumentInterface" prot="public">JSL::ArgumentInterface</innerclass>
    <innerclass refid="structJSL_1_1mkdirReturn" prot="public">JSL::mkdirReturn</innerclass>
    <innerclass refid="classJSL_1_1UnitTest" prot="public">JSL::UnitTest</innerclass>
    <innerclass refid="classJSL_1_1Vector" prot="public">JSL::Vector</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceJSL_1a47d8cb112d513ee5a3ae38ca6a89743d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::initialiseFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>initialiseFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a blank file at the specified location, overwriting any other file at the given location <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file which the system will attempt to open </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="10" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="10" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a838b3a913896993bc008408d164ec19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::writeStringToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;content)</argsstring>
        <name>writeStringToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opens the provided file and appends the provided string to the file, before closing it. If the file does not exist, it creates it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired string to be appended to the file (accepts control characters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="23" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1d611217d83275af846cbc091ff98f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSL::writeVectorToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::vector&lt; T &gt; &amp;contentVector, const std::string &amp;delimiter, bool includeTerminalLineBreak)</argsstring>
        <name>writeVectorToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>contentVector</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeTerminalLineBreak</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with writeStringToFile, but accepts a vector of templated entities. The writing loops over the vector and writes them one at a time, separated by the delimiter object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contentVector</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of templated objects to be written to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written after every entry of contentVector <emphasis>except</emphasis> the final entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeTerminalLineBreak</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, appends a linebreak character at the end of the vector. Useful for sequentially writing rows of data to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="39" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="39" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a8c08233b0cb834d4dcde1153b4b8c8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSL::writeMatrixToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::vector&lt; std::vector&lt; T &gt;&gt; contentMatrix, const std::string &amp;columnDelimiter, const std::string &amp;rowDelimiter)</argsstring>
        <name>writeMatrixToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; T &gt;&gt;</type>
          <declname>contentMatrix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>columnDelimiter</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rowDelimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with writeStringToFile and writeVectorToFile, but accepts a vector&lt;vector&gt; of templated entities. The writing loops over the outer vector (the rows), and then at each step, the inner vectors(the columns). Writing them one at a time, separated by the delimiter objects. Objects need not be square matrices to be successfully written. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contentMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector&lt;vector&gt; of templated objects to be written to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columnDelimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written after every individual entry <emphasis>except</emphasis> the final entry in each row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowRelimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written at the end of each row <emphasis>including</emphasis> the final row. This will probably be a linebreak! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="68" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="68" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1752cd7c6e1134da51e9307527e0d788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSL::locationExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>locationExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks for the existence of the provided file location <ndash/> works on both files and directories. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file or directory to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if location exists (and is accessible), false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/locationExists.h" line="14" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/locationExists.h" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1abf525d02b8c49f21ef7faa68b7571f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1mkdirReturn" kindref="compound">mkdirReturn</ref></type>
        <definition>mkdirReturn JSL::mkdir</definition>
        <argsstring>(std::string directory)</argsstring>
        <name>mkdir</name>
        <param>
          <type>std::string</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks the status of the target directory, if it does not exist, attempts to create it. Works wherever the <computeroutput>mkdir</computeroutput> command is installed. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Path (relative or absolute) to the desired directory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structJSL_1_1mkdirReturn" kindref="compound">mkdirReturn</ref> object detailing the success + associated messages for the request </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/mkdir.h" line="24" column="20" bodyfile="/home/jack/Documents/Work/JSL/FileIO/mkdir.h" bodystart="24" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ae48b92e64fb9d321121df976b770efa6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::rm</definition>
        <argsstring>(std::string location, bool recursive)</argsstring>
        <name>rm</name>
        <param>
          <type>std::string</type>
          <declname>location</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>recursive</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls a system-rm on the provided location, and attempts to remove it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>location</parametername>
</parameternamelist>
<parameterdescription>
<para>The target location on which rm is called </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>recursive</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, appends -r to the command, and so removes all subdirectories etc. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/rm.h" line="14" column="13" bodyfile="/home/jack/Documents/Work/JSL/FileIO/rm.h" bodystart="14" bodyend="45"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double JSL::VectorDotProduct</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>VectorDotProduct</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The standard dot product on R^n. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 1,</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 2 (order irrelevant) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The sum (lhs_i * rhs_i) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="340" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="340" bodyend="352" declfile="/home/jack/Documents/Work/JSL/Maths/vector.h" declline="12" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1aa7816eb0cd81b74241ce460237990e70" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::VectorCrossProduct</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>VectorCrossProduct</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>The standard cross product <ndash/> only defined on R^3 (throws an error else) </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 1</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 2 (order relevant - using standard conventions <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 1 x <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 2) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> cross product of inputs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="355" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="355" bodyend="370" declfile="/home/jack/Documents/Work/JSL/Maths/vector.h" declline="13" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a09355c91f84fd99d4634bf9189fef51d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>double</type>
        <definition>double JSL::AngleBetweenVectors</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>AngleBetweenVectors</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Uses <ref refid="classJSL_1_1Vector_1aa8af717591f5548ff471b6e4b28d7f9c" kindref="member">Vector::Norm()</ref> and <ref refid="namespaceJSL_1aeae64b7e0cfdc1ab5f35cca90c32d9f6" kindref="member">VectorDotProduct()</ref> to extract an angle between the vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 1,</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> 2 (order irrelevant) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The angle between the two vectors (between 0 and M_PI) </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="373" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="373" bodyend="386" declfile="/home/jack/Documents/Work/JSL/Maths/vector.h" declline="14" declcolumn="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a7fad54be308ccb76f68933d91c3c542f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSL::operator==</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="205" column="13" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="205" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a394a4f9cee0747c76d1190b0365c7b5a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSL::operator!=</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="222" column="13" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ae6530b77174d0dfae8e0d6e2a810f672" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator+</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Performs obvious vector addition (a+b)_i = a_i + b_i. Throws an error if the vectors are not the same size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector to be summed</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector to be summed (order is irrelevant) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector lhs + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="228" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="228" bodyend="242"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1d8393f2865dc23e7975ad041e341ba5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator-</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Performs obvious vector subtraction (a-b)_i = a_i - b_i. Throws an error if the vectors are not the same size. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vector</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be subtracted from the base vector (order does matter!) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector lhs - rhs. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="244" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="244" bodyend="258"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a4b293e2ac3df51113e80022cb3c2ac99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator+</definition>
        <argsstring>(const Vector &amp;lhs, const double &amp;scalar)</argsstring>
        <name>operator+</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Adds the value of scalar to every element in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be summed</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be added element-wise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector lhs + scalar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="261" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="261" bodyend="271"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ac5ceabb8b9e657c5e2d0faf9b20a36e8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator+</definition>
        <argsstring>(const double &amp;scalar, const Vector &amp;rhs)</argsstring>
        <name>operator+</name>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Exactly equivalent to <ref refid="namespaceJSL_1a4b293e2ac3df51113e80022cb3c2ac99" kindref="member">JSL::operator+(const Vector &amp;lhs, const double &amp;scalar)</ref>, just swapped around. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be added element-wise</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to be summed </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The scalar + rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="274" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="274" bodyend="277"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ac6bd9311dd73aa6227d826bdb94e748d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator-</definition>
        <argsstring>(const Vector &amp;lhs, const double &amp;scalar)</argsstring>
        <name>operator-</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Subtracts the value of scalar to every element in the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The base vector</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The scalar to be subtracted from the base vector element wise </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector lhs - scalar. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="279" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="279" bodyend="282"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ab3d17c5cc03a2048e8637d2054fbc138" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator-</definition>
        <argsstring>(const double &amp;scalar, const Vector &amp;rhs)</argsstring>
        <name>operator-</name>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>A slightly odd operation (included for completeness) - adds the value of scalar to the negative of the elements of the vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The value which acts as a base</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector which will be subtracted elementwise from the base scalar </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector scalar - rhs </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="285" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="285" bodyend="294"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ab4eefbed468f275164855895335b8a29" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator*</definition>
        <argsstring>(const double &amp;scalar, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Naive element-wise scalar multiplication. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply elements by</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to multiply </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointwise product of the elements of rhs and the scalar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="302" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="302" bodyend="310"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1afc5e092de4a9bdc5795d40ee0f51c7b9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator*</definition>
        <argsstring>(const Vector &amp;lhs, const double &amp;scalar)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Alias of <ref refid="namespaceJSL_1ac5ceabb8b9e657c5e2d0faf9b20a36e8" kindref="member">JSL::operator+(const double &amp;scalar,const Vector &amp;rhs)</ref> with the operation order swapped around. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to multiply</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to multiply elements by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointwise product of the elements of lhs and the scalar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="313" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="313" bodyend="316"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1427fd44260592b7d65d27946969fba1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator/</definition>
        <argsstring>(const Vector &amp;lhs, const double &amp;scalar)</argsstring>
        <name>operator/</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const double &amp;</type>
          <declname>scalar</declname>
        </param>
        <briefdescription>
<para>Essentially an alias for <ref refid="namespaceJSL_1ac5ceabb8b9e657c5e2d0faf9b20a36e8" kindref="member">JSL::operator+(const double &amp;scalar,const Vector &amp;rhs)</ref> with the scalar set to one-over itself, i.e. pointwise division of the provided vector. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The vector to divide</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>scalar</parametername>
</parameternamelist>
<parameterdescription>
<para>The value to divide elements by </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The pointwise divisor of the elements of lhs and the scalar </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="319" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="319" bodyend="326"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a5c033d19e73e78e75327d425616fbbb1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref></type>
        <definition>Vector JSL::operator*</definition>
        <argsstring>(const Vector &amp;lhs, const Vector &amp;rhs)</argsstring>
        <name>operator*</name>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Executes the pointwise (Hadamard) product of two vectors. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>lhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The first vector to be multiplied</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rhs</parametername>
</parameternamelist>
<parameterdescription>
<para>The second vector to be multiplied (order is irrelevant) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The vector (lhs * rhs)_i = lhs_i * rhs_i </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="329" column="15" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="329" bodyend="337"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ad9900d0292867da361ddb3f1200a1f99" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::ostream &amp;</type>
        <definition>std::ostream&amp; JSL::operator&lt;&lt;</definition>
        <argsstring>(std::ostream &amp;os, const Vector &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>os</declname>
        </param>
        <param>
          <type>const <ref refid="classJSL_1_1Vector" kindref="compound">Vector</ref> &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
<para>Calls <ref refid="classJSL_1_1Vector_1a73579b4a194cc924341806a5d9ea3817" kindref="member">JSL::Vector::to_string()</ref> and then passes it to the provided stream, enabling sweet, smooth output such as std::cout &lt;&lt; v1 &lt;&lt; std::endl. </para>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>os</parametername>
</parameternamelist>
<parameterdescription>
<para>An output stream capable of parsing strings</para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>obj</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector object to be inserted into the stream for output </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A reference to the modified stream </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Maths/vector.h" line="389" column="8" bodyfile="/home/jack/Documents/Work/JSL/Maths/vector.h" bodystart="389" bodyend="393"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a34a7ba28084b304e97a707c653dce887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; JSL::split</definition>
        <argsstring>(const std::string &amp;s, char delimiter)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits the string based on the chosen delimiter. Repeated delimiters are ignored. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string to be split (unchanged) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The delimiting character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of non-empty strings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/split.h" line="14" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/split.h" bodystart="14" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ae58b7096986a16b70a27e1609eff3014" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::CurrentTime</definition>
        <argsstring>()</argsstring>
        <name>CurrentTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current system time in a readable format (note: was previously called PrintCurrentTime) <simplesect kind="return"><para>A string of the readable format <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="16" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="16" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ad7ff2220bbab0294b95b9aa85332a222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::FormatDuration</definition>
        <argsstring>(int timeInSeconds)</argsstring>
        <name>FormatDuration</name>
        <param>
          <type>int</type>
          <declname>timeInSeconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a duration in seconds, convert it into standard Day/Hour/Minute/Second formatted string. Times less than 1 second are reported as &quot;less than 1 second&quot; <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A human-readable string equal to the input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="31" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="31" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ae7af96a0311784e019209221335f76d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::FormatClock</definition>
        <argsstring>(std::chrono::time_point&lt; std::chrono::system_clock &gt; start, std::chrono::time_point&lt; std::chrono::system_clock &gt; end)</argsstring>
        <name>FormatClock</name>
        <param>
          <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="namespaceJSL_1ad7ff2220bbab0294b95b9aa85332a222" kindref="member">FormatDuration()</ref> on the duration of the start and endpoints of a <computeroutput>chrono</computeroutput> stopwatch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>chrono</computeroutput> object representing the start of the duration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding end-point <computeroutput>chrono</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="73" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="73" bodyend="80"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jack/Documents/Work/JSL/CommandArgs/Argument.h" line="7" column="1"/>
  </compounddef>
</doxygen>
