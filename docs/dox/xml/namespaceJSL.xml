<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.17">
  <compounddef id="namespaceJSL" kind="namespace" language="C++">
    <compoundname>JSL</compoundname>
    <innerclass refid="classJSL_1_1Argument" prot="public">JSL::Argument</innerclass>
    <innerclass refid="classJSL_1_1ArgumentInterface" prot="public">JSL::ArgumentInterface</innerclass>
    <innerclass refid="structJSL_1_1mkdirReturn" prot="public">JSL::mkdirReturn</innerclass>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespaceJSL_1a47d8cb112d513ee5a3ae38ca6a89743d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::initialiseFile</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>initialiseFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a blank file at the specified location, overwriting any other file at the given location <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The file which the system will attempt to open </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="10" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="10" bodyend="15"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a838b3a913896993bc008408d164ec19d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void JSL::writeStringToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::string &amp;content)</argsstring>
        <name>writeStringToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>content</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Opens the provided file and appends the provided string to the file, before closing it. If the file does not exist, it creates it. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>content</parametername>
</parameternamelist>
<parameterdescription>
<para>The desired string to be appended to the file (accepts control characters) </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="23" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="23" bodyend="29"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1d611217d83275af846cbc091ff98f53" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSL::writeVectorToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::vector&lt; T &gt; &amp;contentVector, const std::string &amp;delimiter, bool includeTerminalLineBreak)</argsstring>
        <name>writeVectorToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::vector&lt; T &gt; &amp;</type>
          <declname>contentVector</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>delimiter</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>includeTerminalLineBreak</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with writeStringToFile, but accepts a vector of templated entities. The writing loops over the vector and writes them one at a time, separated by the delimiter object <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contentVector</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector of templated objects to be written to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written after every entry of contentVector <emphasis>except</emphasis> the final entry </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>includeTerminalLineBreak</parametername>
</parameternamelist>
<parameterdescription>
<para>If true, appends a linebreak character at the end of the vector. Useful for sequentially writing rows of data to file. </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="39" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="39" bodyend="58"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a8c08233b0cb834d4dcde1153b4b8c8c7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void JSL::writeMatrixToFile</definition>
        <argsstring>(const std::string &amp;filename, const std::vector&lt; std::vector&lt; T &gt;&gt; contentMatrix, const std::string &amp;columnDelimiter, const std::string &amp;rowDelimiter)</argsstring>
        <name>writeMatrixToFile</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::vector&lt; T &gt;&gt;</type>
          <declname>contentMatrix</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>columnDelimiter</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>rowDelimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>As with writeStringToFile and writeVectorToFile, but accepts a vector&lt;vector&gt; of templated entities. The writing loops over the outer vector (the rows), and then at each step, the inner vectors(the columns). Writing them one at a time, separated by the delimiter objects. Objects need not be square matrices to be successfully written. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>The target file location </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>contentMatrix</parametername>
</parameternamelist>
<parameterdescription>
<para>A vector&lt;vector&gt; of templated objects to be written to file </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>columnDelimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written after every individual entry <emphasis>except</emphasis> the final entry in each row </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>rowRelimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The character(s) to be written at the end of each row <emphasis>including</emphasis> the final row. This will probably be a linebreak! </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" line="68" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/fileWriter.h" bodystart="68" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a1752cd7c6e1134da51e9307527e0d788" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>bool</type>
        <definition>bool JSL::locationExists</definition>
        <argsstring>(const std::string &amp;filename)</argsstring>
        <name>locationExists</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>filename</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks for the existence of the provided file location <ndash/> works on both files and directories. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>filename</parametername>
</parameternamelist>
<parameterdescription>
<para>the name of the file or directory to be checked </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>true if location exists (and is accessible), false if not </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/locationExists.h" line="14" column="6" bodyfile="/home/jack/Documents/Work/JSL/FileIO/locationExists.h" bodystart="14" bodyend="18"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1abf525d02b8c49f21ef7faa68b7571f93" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structJSL_1_1mkdirReturn" kindref="compound">mkdirReturn</ref></type>
        <definition>mkdirReturn JSL::mkdir</definition>
        <argsstring>(std::string directory)</argsstring>
        <name>mkdir</name>
        <param>
          <type>std::string</type>
          <declname>directory</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Checks the status of the target directory, if it does not exist, attempts to create it. Works wherever the <computeroutput>mkdir</computeroutput> command is installed. <linebreak/>
 <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>directory</parametername>
</parameternamelist>
<parameterdescription>
<para>Path (relative or absolute) to the desired directory </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A <ref refid="structJSL_1_1mkdirReturn" kindref="compound">mkdirReturn</ref> object detailing the success + associated messages for the request </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/FileIO/mkdir.h" line="24" column="20" bodyfile="/home/jack/Documents/Work/JSL/FileIO/mkdir.h" bodystart="24" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a34a7ba28084b304e97a707c653dce887" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; JSL::split</definition>
        <argsstring>(const std::string &amp;s, char delimiter)</argsstring>
        <name>split</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>char</type>
          <declname>delimiter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Splits the string based on the chosen delimiter. Repeated delimiters are ignored. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>s</parametername>
</parameternamelist>
<parameterdescription>
<para>The input string to be split (unchanged) </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>delimiter</parametername>
</parameternamelist>
<parameterdescription>
<para>The delimiting character </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A vector of non-empty strings. </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/split.h" line="14" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/split.h" bodystart="14" bodyend="28"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1a22fc26d87034a744e42e70e77db892df" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::PrintCurrentTime</definition>
        <argsstring>()</argsstring>
        <name>PrintCurrentTime</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Get current system time in a readable format <simplesect kind="return"><para>A string of the readable format <linebreak/>
 </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="16" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="16" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ad7ff2220bbab0294b95b9aa85332a222" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::FormatDuration</definition>
        <argsstring>(int timeInSeconds)</argsstring>
        <name>FormatDuration</name>
        <param>
          <type>int</type>
          <declname>timeInSeconds</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given a duration in seconds, convert it into standard Day/Hour/Minute/Second formatted string. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>timeInSeconds</parametername>
</parameternamelist>
<parameterdescription>
<para>The time to be converted </para>
</parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A human-readable string equal to the input </para>
</simplesect>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="31" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="31" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespaceJSL_1ae7af96a0311784e019209221335f76d9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string JSL::FormatClock</definition>
        <argsstring>(std::chrono::time_point&lt; std::chrono::system_clock &gt; start, std::chrono::time_point&lt; std::chrono::system_clock &gt; end)</argsstring>
        <name>FormatClock</name>
        <param>
          <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
          <declname>start</declname>
        </param>
        <param>
          <type>std::chrono::time_point&lt; std::chrono::system_clock &gt;</type>
          <declname>end</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Calls <ref refid="namespaceJSL_1ad7ff2220bbab0294b95b9aa85332a222" kindref="member">FormatDuration()</ref> on the duration of the start and endpoints of a <computeroutput>chrono</computeroutput> stopwatch. <parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>start</parametername>
</parameternamelist>
<parameterdescription>
<para>A <computeroutput>chrono</computeroutput> object representing the start of the duration </para>
</parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>end</parametername>
</parameternamelist>
<parameterdescription>
<para>The corresponding end-point <computeroutput>chrono</computeroutput> </para>
</parameterdescription>
</parameteritem>
</parameterlist>
</para>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/jack/Documents/Work/JSL/Strings/Time.h" line="66" column="20" bodyfile="/home/jack/Documents/Work/JSL/Strings/Time.h" bodystart="66" bodyend="73"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="/home/jack/Documents/Work/JSL/CommandArgs/Argument.h" line="7" column="1"/>
  </compounddef>
</doxygen>
